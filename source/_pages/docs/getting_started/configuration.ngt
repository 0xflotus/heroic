<h2>Configuration</h2>

<ul>
  <li><a href="#cassandra">Configuring Cassandra</a></li>
  <li>Configuring Kafka</li>
</ul>

<h3 id="cassandra">
  Cassandra
</h3>

<p>
  Heroic (by default) uses the <code>heroic</code> keyspace, which has to be
  configured using <code>cqlsh</code>.
</p>

<pre><code language="sql">
CREATE KEYSPACE heroic
  WITH REPLICATION = {
    'class': 'SimpleStrategy',
    'replication_factor': 3
  };

CREATE TABLE heroic.metrics (
  metric_key blob,
  data_timestamp_offset int,
  data_value double,
  PRIMARY KEY(metric_key, data_timestamp_offset)
) WITH COMPACT STORAGE;
</code></pre>

<p>
  Copy the above CQL into a file <code>heroic.cql</code> and run <code>cqlsh</code>
  like the following.
</p>

<div class="callout callout-danger">
  <h4>COMPACT STORAGE</h4>
  <p>
    The <code>COMPACT STORAGE</code> directive is required on the metrics table
    since Heroic supports writing data with Thrift.
    See <a href="http://docs.datastax.com/en/cql/3.0/cql/cql_reference/create_table_r.html?scroll=reference_ds_v3f_vfk_xj__using-compact-storage">Datastax Documentation</a> for details.
  </p>
</div>

<pre><code language="sql">
cqlsh < heroic.cql
</code></pre>

<h3>Heroic: API</h3>

<p>
  TODO: Briefly, what is an API node?
</p>

<pre><code language="yaml">
port: 8080

cluster:
  protocols:
    - type: nativerpc
  discovery:
    type: static
    nodes:
      - nativerpc://localhost:1394
</pre></code>

<p>
  Start Heroic API node
</p>

<pre><code language="bash">
 java -cp heroic.jar com.spotify.heroic.HeroicService heroic.yaml
</code></pre>

<p>
  Test that the node is running properly. Healthy instances should produce a
  output like the following
</p>

<pre><code language="bash">
 curl http://localhost:8080/status
</code></pre>
<pre><code language="json">
{
  "ok": true,
  "consumers": {
    "ok": true,
    "available": 0,
    "ready": 0,
    "errors": 0
  },
  "backends": {
    "ok": true,
    "available": 0,
    "ready": 0
  },
  "metadataBackends": {
    "ok": true,
    "available": 0,
    "ready": 0
  },
  "cluster": {
    "ok": true,
    "onlineNodes": 1,
    "offlineNodes": 0
  }
}
</code></pre>
